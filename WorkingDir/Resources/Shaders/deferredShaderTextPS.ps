Texture2D objTexture[3] : register(t0);		//albedo RGBA, normalRGB_depthA, specular
SamplerState SampleTypeClamp : register(s0);

#include "LightHelp.fx"


DirLight dirLight;

cbuffer MaterialData
{
	float4 ambient;
	float4 diffuse;
	float4 specular;
	int specularPower;
};

struct PS_IN
{
  float4 position : SV_POSITION;
  float3 normal : NORMAL;
  //float4 tangent :TANGENT;
  float2 textCoord : TEXCOORD;
};

struct PS_OUT
{
  float4 ColorRGBA : SV_TARGET0;
  float4 NormalRGB_DepthA : SV_TARGET1;
  float4 AmbR_diffG_specB_powA : SV_TARGET2;
};

PS_OUT FPixelShader( PS_IN input ) 
{
  PS_OUT output= ( PS_OUT )0;

  output.ColorRGBA  = objTexture[0].Sample(SampleTypeClamp, input.textCoord);
  
  float3 normal = input.normal * 0.5 + 0.5;
  
  
  float4 bumpNormal = float4(0,0,0,0); 
  
  bumpNormal = objTexture[1].Sample(SampleTypeClamp, input.textCoord)* 2.0f -1;
  //if(bumpNormal != float4(0,0,0,0))
  
  normal += bumpNormal.xyz;
  normalize(normal);
  
  output.NormalRGB_DepthA = float4( normal, input.position.w);
//output.NormalRGB_DepthA = float4(input.normal,0);

  output.AmbR_diffG_specB_powA = float4( specular.xyz, specularPower);

  //output.ColorRGBA = float4(1, 0, 0, 1);
  //output.NormalRGB_DepthA = float4(0, 1, 0, 1);

  
  return output;
}
