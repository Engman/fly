#include "LightHelp";
cbuffer Camera
{
  float4x4 mInvViewProj;
  float4x4 mInvView;
  float3 cameraPos;
}

DirLight dirLight;

Texture2D colorSRV : register(t0);
Texture2D normal_depthSRV : register(t1);

SamplerState SampleTypeClamp : register(s0);
//SamplerState SampleTypeWrap : register(s1);


//-----------------------------------------------------------------------------------------
// Input and Output Structures
//-----------------------------------------------------------------------------------------

struct PSIn
{
	float4 Pos		: SV_Position;
	float2 TextCoord  : TEXCOORD; 
};

//-----------------------------------------------------------------------------------------
// PixelShader: PSSceneMain
//-----------------------------------------------------------------------------------------
//Phong Shader
float4 Phong(float3 Position, float3 N,float SpecularIntensity, float SpecularPower)
{

	//Calculate Reflection vector
	float3 R = normalize(reflect(dirLight.Direction, N));
	
	//Calculate Eye vector
	float3 E = normalize(CameraPosition - Position.xyz);
	
	//Calculate N.L float NL = dot(N, - dirLight.Direction);

	//Calculate Diffuse
	float3 Diffuse = NL * dirLight.Diffuse.xyz;
	
	//Calculate Specular 
	float Specular = SpecularIntensity * pow(saturate(dot(R, E)), SpecularPower);

	//Calculate Final Product
	return 2 * float4(Diffuse.rgb, Specular); //LightIntensity
}


float4 FPixelShader(PSIn input) :  SV_Target
{	
  float2 textCoord;
	float4 color = colorSRV.Sample( SampleTypeClamp, input.TextCoord); //textCoord );
	
	float3 normal  = normal_depthSRV.Sample( SampleTypeClamp, inpput.TextCoord).xyz;
	normal = mul((2*normal -1),invView);
	
	float depth = normal_depthSRV.Sample( SampleTypeClamp, inpput.TextCoord).w;

	//pos in homogenus clipspace
	float4 position = 1.0f;
	position.x = input.TextCoord.x * 2.0f - 1.0f;
	position.y = -(input.TextCoord.x * 2.0f - 1.0f);
	position.z = depth;
	
	//pos in world space
	position = mul(position,invViewProj);
	position /= position.w;
	float4 LightColor  = Phong( position.xyz, normal, 2, 2);
	return LightColor;
}
