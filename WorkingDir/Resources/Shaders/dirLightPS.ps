#include "LightHelp.fx"

cbuffer Camera : register(b0)
{
  float4x4 mInvViewProj;
  float4x4 mInvView;
  float3 cameraPos;
};
cbuffer LightBuffer : register(b1)
{
	DirLight dirLight;
};



//albedo RGBA, normalRGB_depthA, specular, worldPosition
Texture2D gBufferText[4] : register (t0);
SamplerState SampleTypeClamp : register(s0);

//-----------------------------------------------------------------------------------------
// Input and Output Structures
//-----------------------------------------------------------------------------------------

struct PSIn
{
	float4 Pos		: SV_Position;
	float4 ScreenPos	: Position;
	float2 TextCoord  : TEXCOORD; 

};
struct PSOut
{
	float4 LightMap : SV_TARGET0;
};

//-----------------------------------------------------------------------------------------
// PixelShader: PSSceneMain
//-----------------------------------------------------------------------------------------
//Phong Shader
float4 Phong(float3 Position, float3 N,float SpecularIntensity, float SpecularPower)
{
	//Calculate Reflection vector
	float3 R = normalize(reflect(dirLight.Direction.xyz, N));
	
	//Calculate Eye vector
	float3 E = normalize(cameraPos - Position.xyz);
	
	//Calculate light intensity
	float intensity = dot(N, - dirLight.Direction.xyz);

	//Calculate Diffuse
	float3 ambient = dirLight.Ambient.xyz;
	float3 resultColor  = ambient;
	
	if(intensity>0)
	{
		//Calculate Specular 
		float Specular = max(SpecularIntensity * pow(saturate(dot(R, E)), SpecularPower), 0.0f);
		
		float3 diffuse = (intensity + Specular) * dirLight.Diffuse.xyz;
	
		resultColor += diffuse;
	}
	
	//saturate(resultColor);
	
	//Calculate Final Product 
	return float4(resultColor, 1); 
	
}

  //float4 ColorRGBA 				: SV_TARGET0;
  //float4 NormalRGB_DepthA 		: SV_TARGET1;
  //float4 AmbR_diffG_specB_powA 	: SV_TARGET2;
  //float4 PositionRGB_ 			: SV_TARGET3;
  
PSOut FPixelShader(PSIn input)
{	
	PSOut output= ( PSOut )0;
	
	//sample albedo color
	float4 color = gBufferText[0].Sample( SampleTypeClamp, input.TextCoord);
	
	//normal already in world space
	float3 normal  = gBufferText[1].Sample( SampleTypeClamp, input.TextCoord).xyz;
	normal = 2.0f* normal - 1;
	normal = normalize(normal);
	
	float depth = gBufferText[1].Sample( SampleTypeClamp, input.TextCoord).w;
	
	// projected positions
	float4 position = float4(0,0,0,1);
	
	position.x = input.ScreenPos.x;
	position.y = input.ScreenPos.y;
	position.z = depth;
	
	//pos in world space
	position = mul(position,mInvViewProj);
	position /= position.w;

	//position = gBufferText[3].Sample( SampleTypeClamp, input.TextCoord);
	
	//specular intensity
	float intens= gBufferText[2].Sample( SampleTypeClamp, input.TextCoord).r;
	
	//specular power
	float pow = gBufferText[2].Sample( SampleTypeClamp, input.TextCoord).w;
	pow*= 255;
	
	float4 LightColor = float4(0,0,0,0);
	if(intens != 0) 
	{
		LightColor = Phong( position.xyz, normal, intens, pow);
		LightColor.w = 1;
	}
	
	output.LightMap = LightColor;
	
	return output;
}