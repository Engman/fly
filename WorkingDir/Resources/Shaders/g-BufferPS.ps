//albedo RGBA, normalRGB_depthA, specular  //add glow leater
Texture2D objTexture[3] 		: register(t0);		
SamplerState SampleTypeClamp 	: register(s0);

cbuffer MaterialData
{
	float4 ambient;
	float4 diffuse;
	float4 specular;
	int specularPower;
};

struct PS_IN
{
  float4 position 			: SV_POSITION;
  float4 positionWorld 		: POSITION;
  float4 normal 			: NORMAL;
  float2 textCoord 			: TEXCOORD;
};

struct PS_OUT
{
  float4 ColorRGBA 				: SV_TARGET0;
  float4 NormalRGB_DepthA 		: SV_TARGET1;
  float4 AmbR_diffG_specB_powA 	: SV_TARGET2;
  float4 PositionRGB_ 			: SV_TARGET3;
};

PS_OUT FPixelShader( PS_IN input ) 
{
  PS_OUT output= ( PS_OUT )0;

  //albedo color
  
  
  output.ColorRGBA  = objTexture[0].Sample(SampleTypeClamp, input.textCoord);
    output.ColorRGBA  *= diffuse;
  //normal
  float3 normal = input.normal.xyz * 0.5 + 0.5;
  float4 bumpNormal = float4(0,0,0,0); 
  bumpNormal = objTexture[1].Sample(SampleTypeClamp, input.textCoord)* 2.0f -1;
  normal += bumpNormal.xyz;
  normalize(normal);
  
  output.NormalRGB_DepthA = float4( normal, input.position.w);

  //specular
  float4 textSpec = objTexture[2].Sample(SampleTypeClamp, input.textCoord);
  float4 spec = specular + textSpec;
  spec= clamp(spec, 0,1);
  float pow = specularPower/ 255;
  //output.AmbR_diffG_specB_powA = float4( spec.xyz, specularPower);
	output.AmbR_diffG_specB_powA = float4( textSpec.x, 0,0 , specularPower);
	
  
  //position in worldspace
  output.PositionRGB_ = input.positionWorld;
  
  return output;
}
