cbuffer blurCB
{	
	float textureHeight;
	float textureWidth;
	float blurFactor;
	float padd;
};


Texture2D gNormal_Depth_SRV : register(t0);
Texture2D GlowSRV : register(t1);

SamplerState SampleTypeClamp 	:	 register(s0);



//-----------------------------------------------------------------------------------------
// Input and Output Structures
//-----------------------------------------------------------------------------------------

struct PSIn
{
	float4 Pos			: SV_Position;
	float4 ScreenPos	: Position;
	float2 TextCoord  	: TEXCOORD; 
};

//-----------------------------------------------------------------------------------------
// PixelShader: PSSceneMain
//-----------------------------------------------------------------------------------------
float4 FPixelShader(PSIn input) :  SV_Target
{	

	float PixOffset[5] = {0.0,1.0,2.0,3.0,4.0};
	float Weight[5] = {0.2270270270, 0.1945945946, 0.1216216216, 0.0540540541, 0.0162162162 };
	float4 centerNormalDepth = gNormal_Depth_SRV.Sample(SampleTypeClamp, input.TextCoord);

	float scale = blurFactor; //* centerNormalDepth.z; 

	float dx = 1.0f / textureHeight;
    float4 sum =  GlowSRV.Sample(SampleTypeClamp, input.TextCoord) * Weight[0];
    for( int i = 1; i < 5; i++ )
    {
        sum += GlowSRV.Sample(SampleTypeClamp,  input.TextCoord  + float2(0.0, PixOffset[i]) * scale * dx ) * Weight[i];
        sum += GlowSRV.Sample(SampleTypeClamp,  input.TextCoord - float2(0.0,PixOffset[i]) * scale * dx ) * Weight[i];
    }
    return sum;
  


	/*//horisontal blur
		float texelHeight = 1/600;
	float gWeights[11] = 
	{
		0.05f, 0.05f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f, 0.05f, 0.05f,
	};
	int gBlurRadius = 5;
	float2 textOffset = float2(texelHeight, 0.0f);
	
	float4 color = gWeights[5]* GlowSRV.Sample(SampleTypeClamp, input.TextCoord);
	float totalWeight = gWeights[5]; 
	
	
	float4 centerNormalDepth = gNormal_Depth_SRV.Sample(SampleTypeClamp, input.TextCoord);
	
	float4 neighborNormalDepth; 
	float2 tex;
	for(float i = -gBlurRadius; i<gBlurRadius ; ++i)
	{
		if(i== 0)
			continue;
			
		tex = input.TextCoord + i* textOffset; 
		
		neighborNormalDepth = gNormal_Depth_SRV.Sample(SampleTypeClamp, tex);
		
		//check the difference in normal and depth,
		//if they are too big it is probably two different objects
		if(dot(neighborNormalDepth.xyz, centerNormalDepth.xyz) >= 0.8f &&
			abs(neighborNormalDepth.w - centerNormalDepth.w) <= 0.2f)
		{
			float weight = gWeights[i+gBlurRadius];
			
			color += weight* GlowSRV.Sample(SampleTypeClamp, tex);
			totalWeight += weight; 
			
		}
	} 
	
	return gNormal_Depth_SRV.Sample(SampleTypeClamp, input.TextCoord);
	return color/totalWeight;
	*/
  
}

