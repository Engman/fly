cbuffer Camera : register(b0)
{
  float4x4 cInvViewProj;
  float4x4 lViewProj;
  float3 cameraPos;
  float shadowMapSize;
};

Texture2D colorSRV 	: register(t0);
Texture2D LightSRV 	: register(t1);
Texture2D ShadowSRV : register(t2);
Texture2D DephtSRV 	: register(t3);
Texture2D BluredSRV	: register(t4);



SamplerState SampleTypeClamp 	:	 register(s0);


//-----------------------------------------------------------------------------------------
// Input and Output Structures
//-----------------------------------------------------------------------------------------

struct PSIn
{
	float4 Pos			: SV_Position;
	float4 ScreenPos	: Position;
	float2 TextCoord  	: TEXCOORD; 
};

float ShadowFactor( float depth, float2 smTex, float scale)
{	

	// 2x2 percentage closest filter.
	float dx = (1.0f / shadowMapSize) * scale;

	float s0 = (ShadowSRV.Sample(SampleTypeClamp, smTex).r + 0.001 < depth) ? 0.0f : 1.0f;
	float s1 = (ShadowSRV.Sample(SampleTypeClamp, smTex + float2(dx, 0.0f)).r + 0.001 < depth) ? 0.0f : 1.0f;
	float s2 = (ShadowSRV.Sample(SampleTypeClamp, smTex + float2(0.0f, dx)).r + 0.001 < depth) ? 0.0f : 1.0f;
	float s3 = (ShadowSRV.Sample(SampleTypeClamp, smTex + float2(dx, dx)).r + 0.001 < depth) ? 0.0f : 1.0f;
	// Transform to texel space
	float2 texelPos = (smTex * shadowMapSize) * scale;
	// Determine the lerp amounts.
	float2 lerps = frac( texelPos );
	float shadowCoeff =  lerp( lerp( s0, s1, lerps.x ),lerp( s2, s3, lerps.x ), lerps.y );
	return shadowCoeff;
}

//-----------------------------------------------------------------------------------------
// PixelShader: PSSceneMain
//-----------------------------------------------------------------------------------------
float4 FPixelShader(PSIn input) :  SV_Target
{	
	float4 finalColor;
	
	input.ScreenPos.xy /=  input.ScreenPos.w;
	float2 GBufferTextureSize = float2(1200,600);
	
	float2 UV = 0.5f * (float2(input.ScreenPos.x,- input.ScreenPos.y) + 1) - float2(1.0f / GBufferTextureSize.xy);
	
	
	float4 color = colorSRV.Sample( SampleTypeClamp, UV ); //input.TextCoord); 
	
	float4 glowColor =  BluredSRV.Sample( SampleTypeClamp, input.TextCoord); //UV); //
  
	float4 lighting = LightSRV.Sample( SampleTypeClamp , input.TextCoord); //,UV); //
 
	float depth = DephtSRV.Sample( SampleTypeClamp, input.TextCoord).r; //UV).a; //
	//depth= pow(depth,200);
	//color = float4(depth, depth, depth, 1);
	//return color; 
	float4 position = float4(0,0,0,1);
	
	position.x = input.ScreenPos.x;
	position.y = input.ScreenPos.y;
	position.z = depth;
	
	//transform to world positions
	float4 posWorld  = mul(position, cInvViewProj);
	posWorld /= posWorld.w;
	
	//transform to projected light positions
	float4 LightScreenPos = mul(posWorld, lViewProj); 
	LightScreenPos/= LightScreenPos.w;
	
	float depthLightVP = LightScreenPos.z;
	float2 lightSamp =  0.5f * (float2(LightScreenPos.x, - LightScreenPos.y) + 1); //- float2(1.0f / GBufferTextureSize.xy);
	
	float shadow = 1;
	if(lighting.w >0) // to avoid shadowing the skybox
	{
		float scale = depth;
		shadow = ShadowFactor( depthLightVP, lightSamp, scale);
		shadow = clamp(shadow, 0.4, 1.0f);
		finalColor = saturate(color*0.5 + lighting*0.5)*(shadow);

		//finalColor = lighting;
		return finalColor = saturate( finalColor + glowColor );
	}
	
	shadow = ShadowSRV.Sample(SampleTypeClamp, input.TextCoord).r; // + 0.001 < depthLightVP) ? 0.0f : 1.0f;
	shadow= pow(shadow,200);
	//color = float4(shadow, shadow, shadow, 1);
	
	finalColor = color; 
	
	//finalColor = saturate( finalColor + glowColor );
	return finalColor;
}

